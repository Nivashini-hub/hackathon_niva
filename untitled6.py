# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Vdggp10koi29W1ESvIYgmgRW710pNZxQ
"""

import gradio as gr
from transformers import AutoTokenizer, AutoModelForCausalLM
from ibm_watson import TextToSpeechV1
from ibm_cloud_sdk_core.authenticators import IAMAuthenticator
import os
from tempfile import NamedTemporaryFile

# Initialize IBM Watson Text-to-Speech client
authenticator = IAMAuthenticator('your-ibm-api-key')  # Replace with your actual IBM API key
tts = TextToSpeechV1(authenticator=authenticator)
tts.set_service_url('your-ibm-service-url')  # Replace with your IBM Watson Text-to-Speech service URL

# Load the tokenizer and model for IBM Watsonx Granite (as per your setup)
tokenizer = AutoTokenizer.from_pretrained("ibm-granite/granite-3.3-2b-instruct")
model = AutoModelForCausalLM.from_pretrained("ibm-granite/granite-3.3-2b-instruct")

# Tone-specific rewriting function
def rewrite_text(text, tone="Neutral"):
    tone_prompts = {
        "Neutral": "Rewrite the following text in a neutral tone while keeping the original meaning intact:",
        "Suspenseful": "Rewrite the following text in a suspenseful tone to make it more thrilling and dramatic:",
        "Inspiring": "Rewrite the following text in an inspiring and uplifting tone to encourage and motivate the reader:"
    }

    prompt = tone_prompts.get(tone, "Rewrite the following text in a neutral tone:")
    messages = [{"role": "user", "content": f"{prompt} {text}"}]

    inputs = tokenizer(messages, return_tensors="pt").to(model.device)
    outputs = model.generate(**inputs, max_new_tokens=200)
    rewritten_text = tokenizer.decode(outputs[0], skip_special_tokens=True)
    return rewritten_text

# Function to convert text to speech using IBM Watson Text-to-Speech
def text_to_speech(text, voice="en-US_MichaelVoice"):
    # Use IBM Watson Text-to-Speech API to generate speech
    with NamedTemporaryFile(delete=False, suffix=".mp3") as temp_file:
        with open(temp_file.name, 'wb') as audio_file:
            response = tts.synthesize(
                text,
                voice=voice,
                accept='audio/mp3'
            ).get_result()
            audio_file.write(response.content)

        return temp_file.name

# Function to process user input and return results
def audiobook_creator(text_input, tone="Neutral", voice="en-US_MichaelVoice"):
    # Rewrite the input text in the selected tone
    rewritten_text = rewrite_text(text_input, tone=tone)

    # Convert the rewritten text into speech (audio file)
    audio_file_path = text_to_speech(rewritten_text, voice=voice)

    # Provide side-by-side text comparison and the audio file
    return {
        "Original Text": text_input,
        "Rewritten Text": rewritten_text,
        "Audio File": audio_file_path
    }

# Create the Gradio interface
iface = gr.Interface(
    fn=audiobook_creator,
    inputs=[
        gr.Textbox(label="Enter Text", placeholder="Type or paste the text you want to convert...", lines=5),
        gr.Dropdown(label="Select Tone", choices=["Neutral", "Suspenseful", "Inspiring"], value="Neutral"),
        gr.Dropdown(label="Select Voice", choices=["en-US_MichaelVoice", "en-US_AllisonVoice", "en-US_LisaVoice"], value="en-US_MichaelVoice")
    ],
    outputs=[
        "text",  # Side-by-side comparison of original and rewritten text
        "text",  # Rewritten text output
        gr.Audio(type="file", label="Downloadable Audio")  # Audio output in .mp3
    ],
    title="Generative AI Audiobook Creator",
    description="Transform text into expressive, tone-adjusted audio narrations. Choose the tone, voice, and enjoy the rewritten text alongside the narration."
)

# Launch the Gradio interface
iface.launch()